<form id="loginForm" action="api/v1/login" novalidate>
  <div class="notification"  
  style="
  background-color: #f5f7fa;
  border: 2px solid #ff3c3f;
  border-radius: 4px;
  justify-content: center;
  align-items: center;
  padding: 16px;
  gap: 4px;
  margin-bottom: 32px;
  font-size: 16px;
  display: none;
  ">
    <sl-icon style="height: 20px; width: 20px; color: #ff3c3f;" name="exclamation-circle-fill"></sl-icon>
    <p class="message"></p>
  </div>
  <h2 style="text-align: center;">Welcome back!</h2>
  <p style="text-align: center; margin-bottom: 8px; color: #838383;">Login with your credentials.</p>
  <fieldset id="emailField">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required />
  </fieldset>
  <fieldset id="passwordField">
    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required />
  </fieldset>
  <button class="primary" type="submit">Login</button>
  <p style="text-align: center;">or</p>
  <a style="
  display: flex; 
  justify-content: center; 
  align-items: center;
  gap: 4px; 
  background-color: var(--secondary-color);
  padding: 8px;
  border-radius: 4px;
  width: 100%;
  font-weight: 500; 
  color: var(--primary-color); 
  text-decoration: none; 
  cursor: pointer;" 
  href="/google">
  <img src="../../public/google.png" alt="Google Login" width='24px'>
  Login with Google</a>
  <a href="/register" 
  hx-get="/register" 
  hx-target="#content" 
  hx-swap="innerHTML"
  hx-push-url="true">
  Create a new account
  </a>
</form>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('pageshow', () => {
      sessionStorage.clear();
      document.getElementById('loginForm').reset();
    });

    document.body.addEventListener('submit', async (event) => {
      const form = event.target.closest('form');
      const endpoint = form.getAttribute('action');
      const submitButton = form.querySelector('button[type="submit"]');

      if (form) {
        event.preventDefault();

        const isTwoFactorStep = !!document.getElementById('twoFactorAuthCode');
        const formData = new FormData(form);
        const data = {};

        if (isTwoFactorStep) {
          data.twoFactorAuthToken = formData.get('twoFactorAuthCode');
        } else {
          data.email = formData.get('email');
          data.password = formData.get('password');
        }

        try {
          const response = await fetch(`${endpoint}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });

          const result = await response.json();

          if (result.twoFactorRequired) {
            document.getElementById('emailField')?.remove();
            document.getElementById('passwordField')?.remove();

            if (!document.getElementById('twoFactorAuthCode')) {
              const twoFactorAuthField = document.createElement('fieldset');
              twoFactorAuthField.innerHTML = `
                <label for="twoFactorAuthCode">Two Factor Auth Code</label>
                <input type="text" id="twoFactorAuthCode" name="twoFactorAuthCode" required />
              `;
              form.insertBefore(twoFactorAuthField, submitButton);
            }

            submitButton.textContent = 'Verify Code';
            document.querySelector('.message').textContent = 'Please enter your 2FA code.';
          } else if (result.authorized) {
            window.location.href = '/settings';
          } else {
            const notification = document.querySelector('.notification');
            notification.style.display = 'flex';
            document.querySelector('.message').textContent = result.message;
          }
        } catch (error) {
          console.error('Error:', error);
        }
      }
    });
  });
</script>
